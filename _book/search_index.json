[["index.html", "BIOL120 Excercise Guidebook Chapter 1 Quantitative Biology (BIOL120) Excercise Guidebook Additional information about the professor", " BIOL120 Excercise Guidebook Professors Jackie Dresch and Javier F. Tabima Restrepo 2022-09-06 Chapter 1 Quantitative Biology (BIOL120) Excercise Guidebook Welcome to Quantitative Biology! This document here will be your excercise guidebook, or what some will call the Laboratory notebook. You will find here all the exercises for class, as well as a basic reference guide for basics of coding and all the resources we will use for the course Additional information about the professor Professor Tabima Restrepo is always reachable at jtabima@clarku.edu. Office hours are on Wednesdays between 1PM and 3PM at Larsy 223, or by email. "],["structure-of-the-guidebook-and-faqs.html", "Chapter 2 Structure of the Guidebook and FAQs 2.1 What do we need for lab sessions? 2.2 Why are we using these programs? 2.3 Do we need to know how to program?", " Chapter 2 Structure of the Guidebook and FAQs 2.1 What do we need for lab sessions? For our labs we are going to use R, RStudio and the basic UNIX command line We will also use atom, a basic text editor that’s widely used in programming to view and edit files. We will use the local cluster called SMAUG (See Figure 1). SMAUG is a computer that the Tabima lab hosts that has 32 processors, more than 14 TB of storage and 128 GB of RAM. Enough to do any kind of analyses. 2.2 Why are we using these programs? While most of our stuff will be executed online, I thought it would be great that we learn a bit about programming and reproducible science. R and RStudio will allow us to do that. With R we can create code that can be reproducible and we can use for future analisis. With RStudio we will have an easy usable user interface to create notebooks like this one! Atom will help us read files we wouldn’t be able to read otherwise. As we go forward with class we will see some examples of these files. 2.3 Do we need to know how to program? No. We will learn how to do some basic programming and how to use the command line (i.e. how to use basic commands, how to create folders, execute programs and create loops). Being recursive and using the resources we can is very important. Sometimes things won’t work as expected and we MUST find an alternative. This is one of those cases. "],["software.html", "Chapter 3 Software for class 3.1 How to install R? 3.2 How to install RStudio? 3.3 How to install Atom?", " Chapter 3 Software for class Objectives: To familiarize ourselves with the main software used in class To install programs used for basic quantitative biology To perform basic tests of functionality of these programs As I mentioned in the previous chapter, we are going to use R, RStudio and the basic UNIX command line for our exercises, as well as atom, a basic text editor that’s widely used in programming to view and edit files. 3.1 How to install R? Open an internet browser and go to www.r-project.org Click the “download R” link in the middle of the page. Downloading R Select a CRAN location (a mirror site) and click the corresponding link. Downloading R Click on the “Download R for” your operating system link at the top of the page. Links for R For Windows users: Click on the “install R for the first time” link at the top of the page. Run the .exe file and follow the installation instructions. For MacOS X users: Click on the “R-4.0.2.pkg” link to download the install package. Run the .pkg file and follow the installation instructions. 3.2 How to install RStudio? Go to www.rstudio.com and click on the “Download” link. 2. Click on “Download RStudio Desktop (FREE)” in the lower part of the page. Links for R Click on the version recommended for your system. save the .exe/.dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder. 3.3 How to install Atom? Go to the atom webpage at https://atom.io/ Click on Download. In Mac OS: Move the application to the Applications folder In Windows: Execute the AtomSetup.exe file "],["testing-the-software.html", "Chapter 4 Testing the software 4.1 Testing R and RStudio 4.2 Testing Atom", " Chapter 4 Testing the software 4.1 Testing R and RStudio Go to http://140.232.222.154:8787 Log in using your Clark username without the @clarku.edu (e.g. my user would be jtabima) and the BIOL123 password all in capitals You should see a window like this: RStudio panels You should have three panes open (or probably four). The one in the left that says R version XXX is your console. Most of the code goes there, both input and output. On the upper right you have the environment/history pane. The environment stores and shows you all the files being used by the current R session that are saved in your RAM. We will rarely use the environment in this course, but its still an important feature to know how much memory is being used, how many files are loaded and if our objects are actually being used by R. The history panel will show you all the previously used code. Finally, the lower right has the Files, Plots, Packages, Help, and Viewer panes. These panes show exactly that: The files in the folder you are in, the plots generated by R, the R packages that will be loaded, and the help for the different R packages. The Viewer panel is a special feature that is used by some packages, we will use it later. Now, you will see the menu in the top. Click on the new file element and lets do our first R notebook. Click on new file, and then R notebook RStudio panels We will talk on class about R notebooks and why they are important for our course! 4.2 Testing Atom To test Atom, download the atom_test file from the moodle page Open Atom in Applications Use File -&gt; Open and open atom_test You should see this: RStudio panels We will use Atom to open more of these kinds of files that have no programs associated with them! Atom can open any text file that is unformatted, as well as many scripts and programs. We won’t go so deep into these other elements (Remember, this is an Introduction course!) but we can discuss them in the lab. "],["rmark.html", "Chapter 5 Introduction to electronic notebooks in R Markdown 5.1 Markdown formats 5.2 Basics of Markdown 5.3 R Markdown Excerise: 5.4 Additional information on Markdown", " Chapter 5 Introduction to electronic notebooks in R Markdown Objectives: To create electronic notebooks for course To familiarize ourselves with the use of R markdown and its features To create our initial R markdown document To understand the importance of replicable and reproducible notebooks The electronic lab notebooks we will use will in class will be created as R Markdown documents. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. 5.1 Markdown formats As mentioned above, Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. We will use R Markdown as it will allow us to create documents that we can modify in different computers (as long as we have R and R Studio). We will call these documents Electronic Lab Notebooks (ELS). These ELS’ will be used to write down what you have done in class, save the results and the commands and also will tell us where the files you are using will be at. But, before we go into the super complex part of it, lets learn the basics of R markdown. 5.2 Basics of Markdown So, the idea to use the R markdown file as a E-notebook we need to understand what the syntax is. Syntax: a set of rules for or an analysis of the syntax of a language 5.2.1 Basic syntax In the case of markdown, all the text that is not formatted in any way will be displayed in the most basic font. So you’ll see that all of these sentences are in simple format. In addition, if you surround words with certain elements, it can become a word in bold or in italics. In this case, when I add a ** before and after the word I want to highlight, the word becomes a bold word. When I add a ** before and after the word I want to highlight, the word becomes a word in italics. If you want to add a header, or a subtitle, start a sentence with #. One # means main header, two will be a subtitle, and so on. 5.2.2 Lines of code Markdown allows you to create unformatted lines, or lines of code. In these lines you can add the code you are using for certain steps, or to illustrate examples. To create a code in-line, just add a `(backtick) between the line of code 5.2.2.1 Example of inline code: Similarity searches were done using blastn with default parameters and an expected E-value of 10-5. 5.2.2.2 Example of code blocks: To create a code block, start a region with three `(backticks). Add the code in the line after the backticks and then close with three additional backticks. This is a code-block blastp -query q 5.2.3 Lists You can create unordered or ordered lists in Markdown. To create unordered lists in markdown, start each element of the list with a - sign: Code: - Bananas - Pijamas - Bandanas Result: Bananas Pijamas Bandanas To create ordered lists, add a number with a period before each element. The numbers don’t have to be consecutive, which will allow Markdown to modify the list no problem (Check the raw code before you run the Knitr command): Code: 1. Wake up 1. Make the bed 1. Lie down again Result: Wake up Make the bed Lie down again You can also make nested lists! Nested lists can are done by creating list using 4 spaces: Code: 1. This week: - Homework - Breakfast - Cats litter 2. This weekend - Nothing Result: This week: Homework Breakfast Cats litter This weekend Nothing 5.2.4 Horizontal rules If you want to separate sections by a horizontal rule, use three * in a row in an empty line: *** 5.2.5 Links, figures and tables Finally, we can add links, figures and tables in the Markdown document 5.2.5.1 Hyperlinks To add a link in markdown, just use the [link name](link address) syntax, where you add the link of interest in the parenthesis and a generic name for the link between the square brackets. For example, if I want to link NCBI, then the code should be [NCBI](ncbi.nlm.nih.gov/), and it will look like this: NCBI 5.2.5.2 Figures To add a figure from the internet you use a similar syntax than what we used in the links section, but with a exclamation mark at the beginning of the syntax: ![Clark Logo](https://www.clarku.edu/wp-content/themes/clarku/assets/img/main-logo.svg) results in Clark Logo You can also add images that are not online. For this, you can just upload the image of interest into the folder where your Markdown file is and link it locally as such: ![Local Image of my cat](cat_img.JPG) using the Upload button in the File Panel Viewer in your lower right. 5.2.6 Tables Finally, lets learn how to add tables. Tables in markdown can be annoying, but gladly there are online elements that will help us with tables. However, lets start basic. A table can be created by having list of words and separating them with hyphens - (for the first row), and then separating each column with a pipe |: Header One Header Two Cell [1,1] Cell [1,2] Cell [2,1] Cell [2,2] So, you can imagine that creating a gigantic table is a mess. Imagine creating the table from the syllabus into Markdown? Do not worry, use this amazing page to copy and paste any Excel/CSV/Table and turn it into Markdown! Just copy and paste it from the page: Week Lecture 1 Introduction to Quantitative Biology (Dresch and Tabima) 2 Biological Datasets and creating electronic notebooks (Tabima) 3 Introduction to the UNIX command line (Tabima) 4 Data management in the command line (Tabima) 5 Extracting patterns and data using UNIX (Tabima) 6 Introduction to scripting in UNIX (Tabima) 7 Creating pipelines for basic data analysis in UNIX (Tabima) 8 Introduction to Matlab (Dresch) 9 m files and functions (Dresch) 10 Inputting/Exporting Data (Dresch) 11 Data Visualization (Dresch) 12 Simple Statistics (Dresch) 13 Data Fitting (Dresch) 14 Group Project time 15 Final submission Group Project 5.3 R Markdown Excerise: Create a Markdown page that describes yourself in a simple manner. Use as many element of syntax as possible, like bold text, italics, lists, tables and even add a picture of yourself. You can make it a very simple resume, a simple CV or just a small paragraph of you and your likes. 5.4 Additional information on Markdown Mastering Markdown by GitHub Using online resources to learn Markdown R markdown gallery of all the cool stuff we can do with Markdown "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
