[["index.html", "BIOL120 Excercise Guidebook Chapter 1 Quantitative Biology (BIOL120) Excercise Guidebook Additional information about the professor", " BIOL120 Excercise Guidebook Professors Jackie Dresch and Javier F. Tabima Restrepo 2022-09-28 Chapter 1 Quantitative Biology (BIOL120) Excercise Guidebook Welcome to Quantitative Biology! This document here will be your excercise guidebook, or what some will call the Laboratory notebook. You will find here all the exercises for class, as well as a basic reference guide for basics of coding and all the resources we will use for the course Additional information about the professor Professor Tabima Restrepo is always reachable at jtabima@clarku.edu. His office hours are on Wednesdays between 1PM and 3PM in Lasry 223, or by email. Professor Dresch is always reachable at jdresch@clarku.edu. Her office hours are on Tuesdays and Fridays between 10:30 and 11:30 AM in Lasry 111, or by email. "],["structure-of-the-guidebook-and-faqs.html", "Chapter 2 Structure of the Guidebook and FAQs 2.1 What do we need for lab sessions? 2.2 Why are we using these programs? 2.3 Do we need to know how to program?", " Chapter 2 Structure of the Guidebook and FAQs 2.1 What do we need for lab sessions? For our labs we are going to use R, RStudio, the basic UNIX command line, and MATLAB. We will also use atom, a basic text editor that’s widely used in programming to view and edit files. We will use the local cluster called SMAUG (See Figure 1). SMAUG is a computer that the Tabima lab hosts that has 32 processors, more than 14 TB of storage and 128 GB of RAM. Enough to do any kind of analyses. 2.2 Why are we using these programs? While most of our stuff will be executed online, I thought it would be great that we learn a bit about programming and reproducible science. R and RStudio will allow us to do that. With R we can create code that can be reproducible and we can use for future analisis. With RStudio we will have an easy usable user interface to create notebooks like this one! MATLAB will also give us the opportunity to learn some programming skills and get some exposure to another program widely used by computational and mathematical biologists. Atom will help us read files we wouldn’t be able to read otherwise. As we go forward with class we will see some examples of these files. 2.3 Do we need to know how to program? No. We will learn how to do some basic programming and how to use the command line (i.e. how to use basic commands, how to create folders, execute programs and create loops). Being recursive and using the resources we can is very important. Sometimes things won’t work as expected and we MUST find an alternative. This is one of those cases. "],["software.html", "Chapter 3 Software for class 3.1 How to install R? 3.2 How to install RStudio? 3.3 How to install Atom? 3.4 How to install MATLAB?", " Chapter 3 Software for class Objectives: To familiarize ourselves with the main software used in class To install programs used for basic quantitative biology To perform basic tests of functionality of these programs As I mentioned in the previous chapter, we are going to use R, RStudio and the basic UNIX command line for our exercises, as well as atom, a basic text editor that’s widely used in programming to view and edit files. 3.1 How to install R? Open an internet browser and go to www.r-project.org Click the “download R” link in the middle of the page. Downloading R Select a CRAN location (a mirror site) and click the corresponding link. Downloading R Click on the “Download R for” your operating system link at the top of the page. Links for R For Windows users: Click on the “install R for the first time” link at the top of the page. Run the .exe file and follow the installation instructions. For MacOS X users: Click on the “R-4.0.2.pkg” link to download the install package. Run the .pkg file and follow the installation instructions. 3.2 How to install RStudio? Go to www.rstudio.com and click on the “Download” link. 2. Click on “Download RStudio Desktop (FREE)” in the lower part of the page. Links for R Click on the version recommended for your system. save the .exe/.dmg file on your computer, double-click it to open, and then drag and drop it to your applications folder. 3.3 How to install Atom? Go to the atom webpage at https://atom.io/ Click on Download. In Mac OS: Move the application to the Applications folder In Windows: Execute the AtomSetup.exe file 3.4 How to install MATLAB? Go to Clark’s software webpage at https://www.clarku.edu/offices/its/a-z-service-catalog/software-for-all/ Click on the text under MATLAB “Download”. You will be redirected to the mathworks website through Clark University. After you click on Sign in to get started, you will need to follow the prompts to login using your Clark username. "],["testing-the-software.html", "Chapter 4 Testing the software 4.1 Testing R and RStudio 4.2 Testing Atom", " Chapter 4 Testing the software 4.1 Testing R and RStudio Open your R studio after installation You should see a window like this: RStudio panels You should have three panes open (or probably four). The one in the left that says R version XXX is your console. Most of the code goes there, both input and output. On the upper right you have the environment/history pane. The environment stores and shows you all the files being used by the current R session that are saved in your RAM. We will rarely use the environment in this course, but its still an important feature to know how much memory is being used, how many files are loaded and if our objects are actually being used by R. The history panel will show you all the previously used code. Finally, the lower right has the Files, Plots, Packages, Help, and Viewer panes. These panes show exactly that: The files in the folder you are in, the plots generated by R, the R packages that will be loaded, and the help for the different R packages. The Viewer panel is a special feature that is used by some packages, we will use it later. Now, you will see the menu in the top. Click on the new file element and lets do our first R notebook. Click on new file, and then R notebook RStudio panels We will talk on class about R notebooks and why they are important for our course! 4.2 Testing Atom To test Atom, download the atom_test file from the moodle page Open Atom in Applications Use File -&gt; Open and open atom_test You should see this: RStudio panels We will use Atom to open more of these kinds of files that have no programs associated with them! Atom can open any text file that is unformatted, as well as many scripts and programs. We won’t go so deep into these other elements (Remember, this is an Introduction course!) but we can discuss them in the lab. "],["rmark.html", "Chapter 5 Introduction to electronic notebooks in R Markdown 5.1 Markdown formats 5.2 Basics of Markdown 5.3 R Markdown Excerise: 5.4 Additional information on Markdown", " Chapter 5 Introduction to electronic notebooks in R Markdown Objectives: To create electronic notebooks for course To familiarize ourselves with the use of R markdown and its features To create our initial R markdown document To understand the importance of replicable and reproducible notebooks The electronic lab notebooks we will use will in class will be created as R Markdown documents. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. 5.1 Markdown formats As mentioned above, Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. We will use R Markdown as it will allow us to create documents that we can modify in different computers (as long as we have R and R Studio). We will call these documents Electronic Lab Notebooks (ELS). These ELS’ will be used to write down what you have done in class, save the results and the commands and also will tell us where the files you are using will be at. But, before we go into the super complex part of it, lets learn the basics of R markdown. 5.2 Basics of Markdown So, the idea to use the R markdown file as a E-notebook we need to understand what the syntax is. Syntax: a set of rules for or an analysis of the syntax of a language 5.2.1 Basic syntax In the case of markdown, all the text that is not formatted in any way will be displayed in the most basic font. So you’ll see that all of these sentences are in simple format. In addition, if you surround words with certain elements, it can become a word in bold or in italics. In this case, when I add a ** before and after the word I want to highlight, the word becomes a bold word. When I add a ** before and after the word I want to highlight, the word becomes a word in italics. If you want to add a header, or a subtitle, start a sentence with #. One # means main header, two will be a subtitle, and so on. 5.2.2 Lines of code Markdown allows you to create unformatted lines, or lines of code. In these lines you can add the code you are using for certain steps, or to illustrate examples. To create a code in-line, just add a `(backtick) between the line of code 5.2.2.1 Example of inline code: Similarity searches were done using blastn with default parameters and an expected E-value of 10-5. 5.2.2.2 Example of code blocks: To create a code block, start a region with three `(backticks). Add the code in the line after the backticks and then close with three additional backticks. This is a code-block blastp -query q 5.2.3 Lists You can create unordered or ordered lists in Markdown. To create unordered lists in markdown, start each element of the list with a - sign: Code: - Bananas - Pijamas - Bandanas Result: Bananas Pijamas Bandanas To create ordered lists, add a number with a period before each element. The numbers don’t have to be consecutive, which will allow Markdown to modify the list no problem (Check the raw code before you run the Knitr command): Code: 1. Wake up 1. Make the bed 1. Lie down again Result: Wake up Make the bed Lie down again You can also make nested lists! Nested lists can are done by creating list using 4 spaces: Code: 1. This week: - Homework - Breakfast - Cats litter 2. This weekend - Nothing Result: This week: Homework Breakfast Cats litter This weekend Nothing 5.2.4 Horizontal rules If you want to separate sections by a horizontal rule, use three * in a row in an empty line: *** 5.2.5 Links, figures and tables Finally, we can add links, figures and tables in the Markdown document 5.2.5.1 Hyperlinks To add a link in markdown, just use the [link name](link address) syntax, where you add the link of interest in the parenthesis and a generic name for the link between the square brackets. For example, if I want to link NCBI, then the code should be [NCBI](ncbi.nlm.nih.gov/), and it will look like this: NCBI 5.2.5.2 Figures To add a figure from the internet you use a similar syntax than what we used in the links section, but with a exclamation mark at the beginning of the syntax: ![Clark Logo](https://www.clarku.edu/wp-content/themes/clarku/assets/img/main-logo.svg) results in Clark Logo You can also add images that are not online. For this, you can just upload the image of interest into the folder where your Markdown file is and link it locally as such: ![Local Image of my cat](cat_img.JPG) using the Upload button in the File Panel Viewer in your lower right. 5.2.6 Tables Finally, lets learn how to add tables. Tables in markdown can be annoying, but gladly there are online elements that will help us with tables. However, lets start basic. A table can be created by having list of words and separating them with hyphens - (for the first row), and then separating each column with a pipe |: Header One Header Two Cell [1,1] Cell [1,2] Cell [2,1] Cell [2,2] So, you can imagine that creating a gigantic table is a mess. Imagine creating the table from the syllabus into Markdown? Do not worry, use this amazing page to copy and paste any Excel/CSV/Table and turn it into Markdown! Just copy and paste it from the page: Week Lecture 1 Introduction to Quantitative Biology (Dresch and Tabima) 2 Biological Datasets and creating electronic notebooks (Tabima) 3 Introduction to the UNIX command line (Tabima) 4 Data management in the command line (Tabima) 5 Extracting patterns and data using UNIX (Tabima) 6 Introduction to scripting in UNIX (Tabima) 7 Creating pipelines for basic data analysis in UNIX (Tabima) 8 Introduction to Matlab (Dresch) 9 m files and functions (Dresch) 10 Inputting/Exporting Data (Dresch) 11 Data Visualization (Dresch) 12 Simple Statistics (Dresch) 13 Data Fitting (Dresch) 14 Group Project time 15 Final submission Group Project 5.3 R Markdown Excerise: Create a Markdown page that describes yourself in a simple manner. Use as many element of syntax as possible, like bold text, italics, lists, tables and even add a picture of yourself. You can make it a very simple resume, a simple CV or just a small paragraph of you and your likes. 5.4 Additional information on Markdown Mastering Markdown by GitHub Using online resources to learn Markdown R markdown gallery of all the cool stuff we can do with Markdown "],["datasets.html", "Chapter 6 Creating datasets and replicability 6.1 Creating basic datasets 6.2 Asking biological questions and identifying measurable outcomes 6.3 Creating a clean raw dataset 6.4 Creating basic (basic) plots in R 6.5 Comparisons between groups.", " Chapter 6 Creating datasets and replicability Objectives: To use the scientific method for data analysis To generate research questions based on our observations To create data sets based on metrics of interest To open and use data sets in a computational environment Today’s laboratory will be focused in the essentials of building data sets. Data sets can be built with absolutely anything you can make an observation from and ask a question about. Before we start, however, lets answer these questions: Question 1 What are the main steps of the scientific method? How do you define a research question? What is the difference between a research question and a hypothesis? 6.1 Creating basic datasets So, we have a bag of candy in front of us. Bags of candy have several different elements on it: The various flavors, the diversity in colors. Some may have different shapes, ect. The objective for today is to ask research questions and create a dataset that allows you to answer different questions based on your research focus (in this case, your candy bag) 6.2 Asking biological questions and identifying measurable outcomes Create groups of two students Open the bag of candy and generate some observations about it. It can be about anything you find interesting or peaks your interest Question 2 Create at least three observations from tour research object and add them here: Choose one observation and create a research question and a hypothesis for it Question 3 Research Question: Hypothesis Using a physical notebook, have a list of variables you think would be directly measurable to test your hypothesis Measure the variables and write down the results in the same physical notebook. Question 4 Take a photo of the page of the notebook and add it here. Did your results answer your research question? How about your hypothesis? Question 5 Research Question: Hypothesis 6.3 Creating a clean raw dataset Using the same dataset, organize your data in a simple data frame using Google Sheets or EtherCalc Copy your spreadsheet into atom, paste it and save it file into a folder in your desktop called BIOL120 with a txt extension (something like data_sheet_candy.txt) WARNING: Do NOT save any of your files with a space or with weird characters (such as ?&gt;&lt;,/’;:=+-). If you need to use a space, use an underscore (_) or separate the names using camel case (i.e. Instead of data sheet candy.txt use either data_sheet_candy.txt or dataSheetCandy.txt) In your R studio, go to the Session menu in the toolbar, select Set Working Directory and select your BIOL120 folder Run the following code after changing the name of the .csv file into what you named it my_data &lt;- read.table(&#39;data_sheet_candy.txt&#39;, header = T) i.e. If my file is called dataset.txt, then I change the code to read.table('dataset.txt') Executable Code Chunks Executable code chunks are sections in your R markdown that allow you to execute or run code inside your file! That means you can do a lot of cool stuff within those chunks, like read datasets, create tables, and plot figures. Executable code chunks look like this: ```{coding language goes here} code goes here ``` That means we can use bash, R and even python (as long as you have installed the correct packages) inside your R markdown document. An example using bash to get the time: ```{bash} date ``` ## Wed Sep 28 18:35:21 EDT 2022 You can also use R as in here: ```{r} (my_data ## Flavor Number ## 1 Lime 12 ## 2 Lemon 13 ## 3 Banana 55 ## 4 Strawberries 23 Check your file loaded by using the code View(my_data) or also adding this into your notebook and kniting the document: my_data ## Flavor Number ## 1 Lime 12 ## 2 Lemon 13 ## 3 Banana 55 ## 4 Strawberries 23 In your R markdown notebook do the following: Question 6 Add the code to read and visualize the data frame What are the names of your columns? What do each of you columns represent? Write if your results are able to test your hypothesis and give an explanation why 6.4 Creating basic (basic) plots in R Now that you have your data set readable by a computer program, we can do some very basic visualization to make it easier to interpret. To do so, we need to install one simple R package that will allow us to create plots. This package is called ggplot. R Packages An R package are a collection of code, data, functions and other elements that allow you to extend the usage of R. Some packages will help you plot, some others will allow you to read data into R in a better and faster way. To use a package the first thing you have to do is Install it. After the package is installed, you just need to load it into the library. Installing a package For example, to install ggplot2, write the following code just once in the CONSOLE (aka. The window in the lower left corner of your R studio) install.packages(‘ggplot2’) Installing a package If you check the console, you’ll see that the code will say DONE: ggplot2 That means that your package has been installed. Loading a package Now, we need to load the package to get the functions to work. To load the package, in your R markdown add this in code block {r} library(ggplot2) loading the ggplot library The command library loads the package into your R environment, and now you can use any of its functions! To learn more about packages in R, read the following link Load the ggplot2 package (make sure you have installed it first) Make sure your data frame is still loaded into R. Question 7 How would you check that the data frame is still loaded in R? Write the code and a justification Now, lets do a basic plot. Chances are that your data set has a set of columns with the colors/flavors/shapes in one column and the number of said elements in a second column. If this is the case, you can create a simple bar plot. A bar plot summarizes all the information for each category (i.e. The element you are using to qualify the data into different sets) in the x-axis and creates bars in the y-axis where the height represents the number of data points for said category. To create the plot, modify and execute the following code: library(ggplot2) ggplot(data=my_data, aes(x=Flavor, y=Number)) + geom_bar(stat=&#39;identity&#39;) Question 8 Is this an easier way of comparing your data? Explain why. 6.5 Comparisons between groups. Now, lets see how our data collection is compared to the other groups Get together with another group Compare your two data collections and answer the following: Question 9 What was the question the other group asked? Did they data collection help them answer this question? Import their data set into your R environment. That means to ask them for their original, hand written data sheet and re-digitize it using Google Sheets or EtherCalc Question 10 Load the data sheet into R and show it in your Markdown notebook Compare it to their digital data sheet. Is it identical? Now, talk to the other group and start thinking of a way to measure the differences between the two data sets. Asking questions For example: One group has M&amp;Ms and the other has Skittles. What are two features in common these two candies have? Color? Flavors? You can, for example, measure the number of colors for both Skittles and M&amp;M’s and compare them Question 11 Research Question: Hypothesis Create a digital data frame with these two comparison and add them to R Question 12 Load the data sheet into R and show it in your Markdown notebook Lets create a plot to compare the two different candies Comparing data sets When you want to compare between different sites/treatments/types of candies is important that the data frame has an extra column that tell you where these are from. For example: Flavor Number Candy Lime 12 Skittles Lemon 13 Skittles Banana 55 Skittles Strawberries 23 Skittles Lime 5 Starburst Lemon 0 Starburst Banana 12 Starburst Strawberries 3 Starburst In this case, we can separate the flavors from each candy. Modify the following code with your column names: ggplot(data=two_candies, aes(x=Flavor, y=Number, fill=Candy)) + geom_bar(stat=&#39;identity&#39;, position=&quot;dodge&quot;) Question 13 Can this graph help you answer your research question? How What do your results show, based on the research question? Compare the code for plotting the two_candies data set versus the code for the my_data data set. What changed? "],["vectors.html", "Chapter 7 Basic R (1): Vectors 7.1 Basic data structures in R 7.2 Unidimensional objects: Vectors", " Chapter 7 Basic R (1): Vectors Objectives: To understand what an object is To identify vectors To learn how to differentiate types of vectors This chapter will focus on how to start using R for biological data sets and quantitative analysis. As we have seen in class, R is incredibly powerful for data analysis. But to be able to use it correctly we will have to understand the different types of data structures in R. 7.1 Basic data structures in R A basic data structure is an n-dimensional object that will store information. Examples of data structures R can handle are vectors, matrices, arrays, data frames and lists. Data structures in R can be classified according to the number of dimensions: Uni-dimensional data structures such as vectors Two-dimensional data structures such as data frames or matrices N-dimensional data structures such as lists (Dont worry about lists for class) # One dimensional objects c(1,2,3,4,5) ## [1] 1 2 3 4 5 c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; # Two dimensional objects data.frame(c(1,2,3,4,5), c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;)) ## c.1..2..3..4..5. c..A....B....C....D....E.. ## 1 1 A ## 2 2 B ## 3 3 C ## 4 4 D ## 5 5 E Objects Ris able to store any type of variable into an object. To create and object what you have to do is place the name of your object followed by &lt;-, then followed by what you want to store there. For example, if we want to store the set of numbers in the previous example in an object called numbers we will do the following: numbers &lt;- c(1,2,3,4,5) You will see in your Environment pane (upper right) that a new object, called numbers is there: That means your object has been created. To check that your object exists, then just write the name of your object in either the R console or your R markdown R chunk block and execute it (hit the play button ion your chunk) numbers ## [1] 1 2 3 4 5 7.2 Unidimensional objects: Vectors It has only one dimension, like a table that only has either columns or rows. So, a “list” of infinite objects in only one direction. This one-dimension object is called a vector, vectors look like this: numbers &lt;- c(1,2,3,4,5) letters &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;) To initiate a vector object, use the c() style. This will invoke a vector that will be filled with the content separated by commas. so, when we call them in R, they look like this: numbers ## [1] 1 2 3 4 5 letters ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; Note that there is no info about rows or columns. That means you are working with vectors. R Functions The c() command is also called a function. Functions are the commands that R uses to interpret an order. In the case of c(), it means Combine Values into a Vector or List The way the R syntax works is like this: function(object) So, for example, if you want to measure the length of an object you use the function length and the object between parenthesis: length(numbers) ## [1] 5 Question 1 Create three vectors: One named words with your five favorite words One named numbers with your lucky numbers One with three numbers and three letters in any order and name it mixed Show the code you used to create the vectors 7.2.1 Classes of vectors Another important command to know if your object is a vector is the class command: class(numbers) ## [1] &quot;numeric&quot; class(letters) ## [1] &quot;character&quot; The results shows that we either have integers or characters. These represent vectors of the same type: An integer vector is comprised by numbers, while a character vector is comprised by letters (or other letter-like characters). Character vectors can be identified because the elements in the vector are surrounded by quotation marks (“), while an integer is not Question 2 Which are the classes of the words, numbers and mixed objects? When you read this sentence please clap real loud and call wither Prof. Dresch or me. 7.2.2 Expanding vectors If you have two vectors of the same class, you can expand them by using the c() command again: # I want to create a vector of letters times 2 (So each letter twice) double.letters &lt;- c(letters, letters) double.letters ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; # Same with numbers double.numbers &lt;- c(numbers, numbers) double.numbers ## [1] 1 2 3 4 5 1 2 3 4 5 # Or I want to add more numbers to my vector: more.numbers &lt;- c(numbers, 6, 7, 8, 9, 10) more.numbers ## [1] 1 2 3 4 5 6 7 8 9 10 Question 3 Increase each of your vectors by two or three more elements and add the code and the results. Create an object that combines your words and numbers vectors. Add the code. What are the classes of each of the objects you created? "],["basic-r-2-data-frames.html", "Chapter 8 Basic R (2) : Data frames 8.1 Creating tables using vectors 8.2 Data frames versus matrices 8.3 Combining different two-dimensional data structures", " Chapter 8 Basic R (2) : Data frames Objectives: To understand what an object is To identify vectors To learn how to differentiate types of vectors There are objects that will have rows and columns, such as data frames and matrices. These are two-dimensional objects that we will use the blanket term Tables. 8.1 Creating tables using vectors We can create tables using vectors # This is a table with two columns and four rows. # Columns are Names and Age # Rows are the age of each person: names &lt;- c(&quot;Kelsey&quot;,&quot;Javier&quot;,&quot;Joe&quot;,&quot;Li&quot;) age &lt;- c(22, 34, 15, 50) # Names is a character vector and age is a numeric/integer vector, so we can put them together in a data frame: age.table &lt;- data.frame(names, age, stringsAsFactors = F) age.table ## names age ## 1 Kelsey 22 ## 2 Javier 34 ## 3 Joe 15 ## 4 Li 50 or loading existing data as we did in Chapter 4 To see if our new object is correct, we can use the class and the str command. str means structure, and will return the structure of the table: # We expect the table to be a data frame class class(age.table) ## [1] &quot;data.frame&quot; # We expect the structure of the table to be one character column, and one numeric column str(age.table) ## &#39;data.frame&#39;: 4 obs. of 2 variables: ## $ names: chr &quot;Kelsey&quot; &quot;Javier&quot; &quot;Joe&quot; &quot;Li&quot; ## $ age : num 22 34 15 50 We should also make sure that our table has the expected dimensions (i.e. Four rows and two columns), We can check this using the dim command: dim(age.table) ## [1] 4 2 Note that it tells you the number of rows first, and then the number of columns. R always uses this order to deal with tables, so rows first and then columns. 8.1.1 Accessing specific rows and columns This in integrated further on the way that R handles tables. using the name of the table followed by square brackets will allow you to access rows or columns. Rows can be accessed on the left side of the square brackets. Use the number of the row you want to access it. So, if you want to access the first row of your age.table data frame, use the following code: age.table[1, ] ## names age ## 1 Kelsey 22 Similar syntax can be used to access the columns, but use the right side of the square brackets: age.table[,1 ] ## [1] &quot;Kelsey&quot; &quot;Javier&quot; &quot;Joe&quot; &quot;Li&quot; Last last thing: You can call each column as a vector using the $ command (in data frames) age.table$names ## [1] &quot;Kelsey&quot; &quot;Javier&quot; &quot;Joe&quot; &quot;Li&quot; age.table$age ## [1] 22 34 15 50 Question 1 Create a data frame using three vectors: colors, candy, numbers. Add the code and the table. What are the classes for each column? 8.2 Data frames versus matrices Data frames and matrices are two-dimensional data structures used in R. Data frames, as shown by the age.table example, can hold on to many different types of one dimensional data structures (such as mix of numeric, character or factor vectors). # Checking that our data frame IS a data frame class(age.table) ## [1] &quot;data.frame&quot; Matrices are numerical two dimensional data structures that only contain numerical values. These matrices are useful for arithmetic operations and other elements of calculus. We can create a matrix by using a vector that includes the data of interest and then specifying on the function how many rows and columns are necessary. # Creating a matrix num.matrix &lt;- matrix(data = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), nrow = 3, byrow = 4) # Checking that the matrix is indeed a matrix class(num.matrix) ## [1] &quot;matrix&quot; &quot;array&quot; # Extracting the first column of the matrix num.matrix[,1] ## [1] 1 5 9 And now we can do some math: num.matrix + 1 ## [,1] [,2] [,3] [,4] ## [1,] 2 3 4 5 ## [2,] 6 7 8 9 ## [3,] 10 11 12 13 Question 2 Create a data frame using three vectors: colors, candy, numbers. Add the code and the table. What are the classes for each column? 8.3 Combining different two-dimensional data structures R can be used to bind different data structures as long as the dimensions are compatible. 8.3.1 Combining by rows For example, if you want to add two tables together by rows, you can use the rbind function: # Let&#39;s create a new data frame with has the same column names as age.table but with different data names &lt;- c(&quot;Fran&quot;,&quot;Yeyi&quot;,&quot;Andy&quot;,&quot;John&quot;) age &lt;- c(31, 32, 17, 40) age.table2 &lt;- data.frame(names, age, stringsAsFactors = F) # Now, we can try and combine those tables by rows: large.age.table &lt;- rbind(age.table, age.table2) large.age.table ## names age ## 1 Kelsey 22 ## 2 Javier 34 ## 3 Joe 15 ## 4 Li 50 ## 5 Fran 31 ## 6 Yeyi 32 ## 7 Andy 17 ## 8 John 40 # We can also check if the dimensions are different than in the original age.table dim(age.table) ## [1] 4 2 dim(age.table2) ## [1] 4 2 dim(large.age.table) ## [1] 8 2 8.3.2 Combining by columns However, we have to be careful about combining tables. Since age.table and age.table2 have the same dimensions, you can combine them by columns using cbind: cbind(age.table, age.table2) ## names age names age ## 1 Kelsey 22 Fran 31 ## 2 Javier 34 Yeyi 32 ## 3 Joe 15 Andy 17 ## 4 Li 50 John 40 But this table would not be very useful in the future as it has repeated column names and that can be a problem for R. Question 3 Create a new data frame with three columns of your liking and combine them with the larger age table. Add the code and the dimensions Try to add an additional column that has a different length. What happens? Explain to the best of your knowledge 8.3.3 Reading in data tables Finally, we will learn how to read various types of data tables. 8.3.3.1 Reading text delimited files (.txt or .tsv) Text delimited files are a simple type of file that contains any type of simplified, unformatted text. This means that the text does not have different fonts, colors, styles, ect. Its just plain and literal text. In the case of data frames, these files separate each column by a tab (The character that appears in the screen when you press the tab key in your keyboard). Tabs are different than spaces! This means, then, that a word that says hello how are you is separated by spaces (That in coding langage are known as \\s) while two columns are separated by the character \\t, which is how a tab is seen by the computer. For example, a table like this: Name Number of cats Javier 3 Jackie 1 Brenda 0 Bea 6 Will look, to you, as Name Number of cats Javier 3 Jackie 1 Brenda 0 Bea 6 Will look (to the computer) like this: Name\\tNumber\\sof\\scats Javier\\t3 Jackie\\t1 Brenda\\t0 Bea\\t6 Do we see the difference? So, to read these data tables separated by tabs, we use the command read.table read.table(file = &quot;Lab_5/data_table.txt&quot;, sep = &quot;\\t&quot;, header = T) ## Name Number.of.cats ## 1 Javier 3 ## 2 Jackie 1 ## 3 Brenda 0 ## 4 Bea 6 Question 4 Download the table from here and read it into R. Add the code. What do the options sep and header mean? (Remember to use ?read.table to help you when you have no idea what a function does) What happens if I remove the sep and header options? What are the classes and lengths of each column? Add the code 8.3.3.2 Reading comma-separated value files (.csv) Comma-separated value files (CSV files) are fancy versions of tab separated text files but that have commas instead of tabs: Name,Number of cats Javier,3 Jackie,1 Brenda,0 Bea,6 CSV’s are super common in sciences and data management. Some of you have noticed that when you copy the data from Google Sheets to your text file it creates commas to separate the columns. To read CSV you can use the read.csv function Question 5 Download the table from here and read it into R using the read.csv function. Read the help and add the code and an explanation of the code syntax Is this table any different from the table in question 4? 8.3.3.3 Reading Excel files (.xlsx) We talked in class how Excel files are not necessarily the best but in most cases they are super important to store information, specially for people that are not well versed in computational stuff. Well, we can also read those files using the read.xlsx command from the package readxl Question 6 Check your datasets chapter and based on this info, install the readxl package in your R session Download the excel spreadsheet from here Using the read.xlsx command, read the cats spreadsheet into one object and the dogs spreadsheet in a different one. Both (Check your spreadsheet in excel or google sheets before hand) - Is this table any different from the table in questions 4 and 5? "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
